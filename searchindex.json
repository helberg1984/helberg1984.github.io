{"categories":[{"title":"Development","uri":"https://helberg1984.github.io/categories/development/"},{"title":"golang","uri":"https://helberg1984.github.io/categories/golang/"},{"title":"syntax","uri":"https://helberg1984.github.io/categories/syntax/"},{"title":"themes","uri":"https://helberg1984.github.io/categories/themes/"},{"title":"计算机","uri":"https://helberg1984.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"posts":[{"content":"评论模块要加serverURLs: '{{- $comment.valine.serverURLs }}'\n配置文件要加serverURLs: https://aakkbxtv.api.lncldglobal.com\n要用最新的\u0026lt;script src=\u0026quot;//code.bdstatic.com/npm/leancloud-storage@4.12.0/dist/av-min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script src=\u0026quot;//code.bdstatic.com/npm/leancloud-storage@4.12.0/dist/av-min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; #这条变化了 \u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/npm/valine\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; var GUEST = ['nick', 'mail', 'link']; var meta = '{{- $comment.valine.meta }}'; meta = meta.split(',').filter(function (item) { return GUEST.indexOf(item) \u0026gt; -1; }); new Valine({ el: '#vcomments', verify: {{- $comment.valine.verify }}, notify: {{- $comment.valine.notify }}, appId: '{{- $comment.valine.appid }}', appKey: '{{- $comment.valine.appkey }}', placeholder: '{{- $comment.valine.placeholder }}', avatar: '{{- $comment.valine.avatar }}', meta: meta, pageSize: '{{- $comment.valine.pageSize }}' || 10, visitor: {{- $comment.valine.visitor }}, serverURLs: '{{- $comment.valine.serverURLs }}' }); \u0026lt;/script\u0026gt;  友情链接：https://blog.csdn.net/hubojing/article/details/121770387\n","id":0,"section":"posts","summary":"评论模块要加serverURLs: '{{- $comment.valine.serverURLs }}' 配置文件要加serverURLs: https://aakkbxtv.api.lncldglobal.com 要用最新的\u0026lt;script src=\u0026quot;//code.bdstatic.com/npm/leancloud-storage@4.12.0/dist/av-min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;//code.bdstatic.com/npm/leancloud-storage@4.12.0/dist/av-min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; #这条变化了 \u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/npm/valine\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; var GUEST = ['nick',","tags":["深坑"],"title":"hugo搭建博客valine评论系统踩坑","uri":"https://helberg1984.github.io/2022/01/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E8%B8%A9%E5%9D%91/","year":"2022"},{"content":"别傻了吉他谱 ","id":1,"section":"posts","summary":"别傻了吉他谱","tags":["音乐"],"title":"别傻了吉他谱","uri":"https://helberg1984.github.io/2022/01/%E5%88%AB%E5%82%BB%E4%BA%86%E5%90%89%E4%BB%96%E8%B0%B1/","year":"2022"},{"content":"这两天用hugo在github上搭建个人博客踩了不少坑，其中之一就是博客在本地电脑环境运行正常显示，但是部署到github上就版面错乱，CSS失效没反应的问题，网上很多博客说要更改设置页的choose themes选项，但是我压根儿在仓库设置里面没有找到这个选项。查了很多资料才发现，原来很简单。只需要按照如下设置即可解决这个问题，特此记录。\n检查hugo网站生成源代码中config.toml文件， 打开后把这个 baseurl = \u0026ldquo;https://www.example.com/\u0026quot; 双引号里面内容换成具体的博客网址，就可以解决CSS失效的问题。\n","id":2,"section":"posts","summary":"这两天用hugo在github上搭建个人博客踩了不少坑，其中之一就是博客在本地电脑环境运行正常显示，但是部署到github上就版面错乱，CS","tags":["深坑"],"title":"hugo部署到github_page时候CSS失效，版面错乱的解决办法","uri":"https://helberg1984.github.io/2022/01/github_page%E7%89%88%E9%9D%A2%E9%94%99%E4%B9%B1/","year":"2022"},{"content":"git配置文件在~/.gitconfig\n使用git config -l 可以查看现在的git环境详细配置\n 配置文件存储位置 /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 \u0026ndash;system 选项，读写的就是这个文件； ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 \u0026ndash;global 选项，读写的就是这个文件； 当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量； 在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 C:\\Documents and Settings$USER。此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。  使用git config -l 可以查看现在的git环境详细配置\n 配置用户信息 当你安装Git后首先要做的事情是设置你的用户名称和邮箱地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：  Shell $ git config --global user.name \u0026quot;John Doe\u0026quot; $ git config --global user.email johndoe@example.com 1 2 $ git config --global user.name \u0026quot;John Doe\u0026quot; $ git config --global user.email johndoe@example.com  你只需要做一次这个设置，如果你传递了 \u0026ndash;global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要\u0026ndash;global选项。\n配置编辑器 Git 需要你输入一些额外消息的时候，默认会使用操作系统指定的默认编辑器，一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：  Shell $ git config \u0026ndash;global core.editor emacs 1 $ git config \u0026ndash;global core.editor emacs 4. 配置密码 如果我们在安装 Git 的时候设置了密码，那么当我们做 Clone 和 Push 等操作的时候就会要求我们输入密码。显然，如果每次都这么做就太麻烦了，我们可以在配置文件中设置密码或时效已解决这样的问题：\n$ git config \u0026ndash;global credential.helper password # 存储密码 $ git config \u0026ndash;global credential.helper \u0026lsquo;cache \u0026ndash;timeout 3600\u0026rsquo; # 每次输入密码将保存3600秒，可设置为其它值 1 2 $ git config \u0026ndash;global credential.helper password # 存储密码 $ git config \u0026ndash;global credential.helper \u0026lsquo;cache \u0026ndash;timeout 3600\u0026rsquo; # 每次输入密码将保存3600秒，可设置为其它值 5. 配置比较工具 还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具：\nShell $ git config \u0026ndash;global merge.tool vimdiff # 设置vimdiff比较工具 1 $ git config \u0026ndash;global merge.tool vimdiff # 设置vimdiff比较工具 Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。当然，你也可以指定使用自己开发的工具。\n查看配置 如果你想要查看配置，可以使用git config指令。config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-\u0026gt;global-\u0026gt;local 底层配置会覆盖顶层配置 分别使用\u0026ndash;system/global/local 可以定位到配置文件。  Shell $ git config \u0026ndash;system \u0026ndash;list # 查看系统配置 $ git config \u0026ndash;global \u0026ndash;list # 查看当前用户配置 $ git config \u0026ndash;local \u0026ndash;list # 查看当前仓库配置 $ git config \u0026ndash;list # 查看全部配置\n我们执行最后一条指令 $ git config \u0026ndash;list core.symlinks=false core.autocrlf=true core.fscache=true color.diff=auto color.status=auto color.branch=auto color.interactive=true 1 2 3 4 5 6 7 8 9 10 11 12 13 $ git config \u0026ndash;system \u0026ndash;list # 查看系统配置 $ git config \u0026ndash;global \u0026ndash;list # 查看当前用户配置 $ git config \u0026ndash;local \u0026ndash;list # 查看当前仓库配置 $ git config \u0026ndash;list # 查看全部配置\n我们执行最后一条指令 $ git config \u0026ndash;list core.symlinks=false core.autocrlf=true core.fscache=true color.diff=auto color.status=auto color.branch=auto color.interactive=true 有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。\n也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面（git config {key}）即可：\nShell $ git config user.name epins 1 2 $ git config user.name epins 7. 获取帮助 可以使用以下三种方法获得任何 Git 命令的手册页(manpage)帮助信息:\nShell $ git help \n$ git  \u0026ndash;help\n$ man git- 1 2 3 $ git help \n$ git  \u0026ndash;help\n$ man git-\n","id":3,"section":"posts","summary":"git配置文件在~/.gitconfig 使用git config -l 可以查看现在的git环境详细配置 配置文件存储位置 /etc/gitconfig 文件：系统中对所有用户都普遍适用的配","tags":["Git"],"title":"Git学习和配置","uri":"https://helberg1984.github.io/2019/12/git%E5%AD%A6%E4%B9%A0%E5%92%8C%E9%85%8D%E7%BD%AE/","year":"2019"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","id":4,"section":"posts","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://helberg1984.github.io/2019/03/markdown-syntax/","year":"2019"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:\n  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}   To enable KaTex globally set the parameter math to true in a project's configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions Examples Inline math: \\( \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… \\)\nBlock math:\n\\[ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } \\]\n","id":5,"section":"posts","summary":"\u003cp\u003eMathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\u003c/p\u003e","tags":null,"title":"Math Typesetting","uri":"https://helberg1984.github.io/2019/03/math-typesetting/","year":"2019"},{"content":"Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.\nThis document is a brief primer on using go templates. The go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that go templates parse very quickly.\nA unique characteristic of go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the go docs.\nBasic Syntax Go lang templates are html files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables Each go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions Go template ship with a few functions which provide basic functionality. The go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic Go templates provide the most basic iteration and conditional logic.\nIteration Just like in go, the go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes One of the most powerful components of go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) The most easily overlooked concept to understand about go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true ---  Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026quot;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026quot; TwitterUser: \u0026quot;spf13\u0026quot; SidebarRecentLimit: 5  Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}}  An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}}  Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt;  ","id":6,"section":"posts","summary":"Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.\nThis document is a brief primer on using go templates.","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","uri":"https://helberg1984.github.io/2014/04/goisforlovers/","year":"2014"}],"tags":[{"title":"css","uri":"https://helberg1984.github.io/tags/css/"},{"title":"development","uri":"https://helberg1984.github.io/tags/development/"},{"title":"Git","uri":"https://helberg1984.github.io/tags/git/"},{"title":"go","uri":"https://helberg1984.github.io/tags/go/"},{"title":"golang","uri":"https://helberg1984.github.io/tags/golang/"},{"title":"html","uri":"https://helberg1984.github.io/tags/html/"},{"title":"index","uri":"https://helberg1984.github.io/tags/index/"},{"title":"markdown","uri":"https://helberg1984.github.io/tags/markdown/"},{"title":"templates","uri":"https://helberg1984.github.io/tags/templates/"},{"title":"themes","uri":"https://helberg1984.github.io/tags/themes/"},{"title":"深坑","uri":"https://helberg1984.github.io/tags/%E6%B7%B1%E5%9D%91/"},{"title":"音乐","uri":"https://helberg1984.github.io/tags/%E9%9F%B3%E4%B9%90/"}]}